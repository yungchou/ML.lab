#------------
#names(test.set)
pred.lm <-  predict(lm, test.set[-17])
rmse.lm <- sqrt(mean( (pred.lm-train.set$SalePrice)^2 ) )
if (!require('dplyr')) install.packages('dplyr'); library(dplyr)
if (!require('ggplot2')) install.packages('ggplot2'); library(ggplot2)
Linear <- data.frame(predicted=pred.lm, observed=test.set[,'SalePrice']) %>%
ggplot(aes(x=observed, y=predicted)) +
geom_point(color='black', pch=21, size=4, fill='red', alpha=0.3) +
geom_abline(slope=1, intercept=0, size=1) +
labs(title="Linear Regression", x='Observed', y='Predicted');Linear
#---------------------
# 2. Ridge Regression
#---------------------
grid = seq(5700, 5800, length=30)
set.seed(2-2)
ridge <-train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='glmnet',trControl=params
,preProcess = c("center", "scale")
,tuneGrid=expand.grid(alpha=0, lambda=grid))
#---------------------
# 2. Ridge Regression
#---------------------
grid = seq(5650, 5800, length=40)
set.seed(2-2)
ridge <-train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='glmnet',trControl=params
,preProcess = c("center", "scale")
,tuneGrid=expand.grid(alpha=0, lambda=grid))
#---------------------
# 2. Ridge Regression
#---------------------
grid = seq(5650, 5750, length=20)
set.seed(2-2)
ridge <-train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='glmnet',trControl=params
,preProcess = c("center", "scale")
,tuneGrid=expand.grid(alpha=0, lambda=grid))
ridge$bestTune
ridge$bestTune
par(mfrow=c(1,2),mar=c(5,5,2,1),mgp=c(3.7,1,0)
);plot(ridge$finalModel,las=1,lwd=2,
xvar='lambda',xlab='Ridge Regression Log Lambda'
);plot(ridge$finalModel,las=1,lwd=2,
xvar='dev',xlab='Ridge Regression Fraction Deviance Explained'
);par(mfrow=c(1,1),mar=c(1,1,1,1),mgp=c(3,1,0))
plot(varImp(ridge),main='Ridge Regression Feature Importance')
plot(varImp(lm),main='Linear Regression Feature Importance')
#------------------------------------------
# Histogram and Density Plots of Residuals
#------------------------------------------
par(mar=c(5.5,5.5,4,2)+0.1,mgp=c(4,1,0)
);hist(residuals(ridge),las=1, freq=FALSE, col='lightblue'
,ylim=c(0,max(density(residuals(ridge))$y))
);lines(density(residuals(ridge)),col='red',lwd=2
);par(mfrow=c(1,1),mar=c(1,1,1,1),mgp=c(3,1,0))
#------------
# Prediction
#------------
pred.ridge <-  predict(ridge, test.set[-16])
#------------
# Prediction
#------------
pred.ridge <-  predict(ridge, test.set[-17])
rmse.ridge <- sqrt(mean( (pred.ridge-train.set$SalePrice)^2 ) )
L2Norm <- data.frame(predicted=pred.ridge, observed=test.set[,'SalePrice']) %>%
ggplot(aes(x=observed, y=predicted)) +
geom_point(color='black', pch=21, size=4, fill='red', alpha=0.3) +
geom_abline(slope=1, intercept=0, size=1) +
labs(title="Ridge Regression", x='Observed', y='Predicted');L2Norm
plot(varImp(lm),main='Linear Regression Feature Importance')
plot(varImp(ridge),main='Ridge Regression Feature Importance')
#---------------------
# 3. Lasso Regression
#---------------------
grid = seq(45,55,length=40)
set.seed(3-3)
lasso <- train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='glmnet',trControl=params
,preProcess = c("center", "scale")
,tuneGrid=expand.grid(alpha=1, lambda=grid))
#---------------------
# 3. Lasso Regression
#---------------------
grid = seq(35,55,length=40)
set.seed(3-3)
lasso <- train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='glmnet',trControl=params
,preProcess = c("center", "scale")
,tuneGrid=expand.grid(alpha=1, lambda=grid))
#---------------------
# 3. Lasso Regression
#---------------------
grid = seq(5,30,length=40)
set.seed(3-3)
lasso <- train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='glmnet',trControl=params
,preProcess = c("center", "scale")
,tuneGrid=expand.grid(alpha=1, lambda=grid))
#---------------------
# 3. Lasso Regression
#---------------------
grid = seq(5,60,length=40)
set.seed(3-3)
lasso <- train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='glmnet',trControl=params
,preProcess = c("center", "scale")
,tuneGrid=expand.grid(alpha=1, lambda=grid))
#---------------------
# 3. Lasso Regression
#---------------------
grid = seq(20,40,length=40)
set.seed(3-3)
lasso <- train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='glmnet',trControl=params
,preProcess = c("center", "scale")
,tuneGrid=expand.grid(alpha=1, lambda=grid))
#---------------------
# 3. Lasso Regression
#---------------------
grid = seq(25,35,length=20)
set.seed(3-3)
lasso <- train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='glmnet',trControl=params
,preProcess = c("center", "scale")
,tuneGrid=expand.grid(alpha=1, lambda=grid))
#---------------------
# 3. Lasso Regression
#---------------------
grid = seq(25,35,length=10)
set.seed(3-3)
lasso <- train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='glmnet',trControl=params
,preProcess = c("center", "scale")
,tuneGrid=expand.grid(alpha=1, lambda=grid))
lasso$bestTune
par(mfrow=c(1,2),mar=c(5,5,2,1),mgp=c(3.7,1,0)
);plot(lasso$finalModel,las=1,lwd=2,
xvar='lambda',xlab='Lasso Regression Log Lambda'
);plot(lasso$finalModel,las=1,lwd=2,
xvar='dev',xlab='Lasso Regression Fraction Deviance Explained'
);par(mfrow=c(1,1),mar=c(1,1,1,1),mgp=c(3,1,0))
plot(varImp(lasso),main='Lasso Regression Feature Importance')
#------------------------------------------
# Histogram and Density Plots of Residuals
#------------------------------------------
par(mar=c(5.5,5.5,4,2)+0.1,mgp=c(4,1,0)
);hist(residuals(lasso),las=1, freq=FALSE, col='lightblue'
,ylim=c(0,max(density(residuals(lasso))$y))
);lines(density(residuals(lasso)),col='red',lwd=2
);par(mfrow=c(1,1),mar=c(1,1,1,1),mgp=c(3,1,0))
#------------
# Prediction
#------------
pred.lasso <- predict(lasso, test.set[-17])
rmse.lasso <- sqrt(mean( (pred.lasso-train.set$SalePrice)^2 ) )
L1Norm <- data.frame(predicted=pred.lasso, observed=test.set[,'SalePrice']) %>%
ggplot(aes(x=observed, y=predicted)) +
geom_point(color='black', pch=21, size=4, fill='red', alpha=0.3) +
geom_abline(slope=1, intercept=0, size=1) +
labs(title="Lasso Regression",
x='Observed', y='Predicted'); L1Norm
#----------------
# 4. Elastic Net
#----------------
grid = seq(0.1,100,length=10)
set.seed(4-4)
elastic <- train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='glmnet', trControl=params
,preProcess = c("center", "scale")
,tuneGrid=expand.grid(
alpha =seq(0.5,1.5,length=10)
,lambda=seq(45,55,length=10)
))
set.seed(4-4)
elastic <- train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='glmnet', trControl=params
,preProcess = c("center", "scale")
,tuneGrid=expand.grid(
alpha =seq(0.05,1.5,length=10)
,lambda=seq(25,55,length=10)
))
#----------------
# 4. Elastic Net
#----------------
set.seed(4-4)
elastic <- train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='glmnet', trControl=params
,preProcess = c("center", "scale")
,tuneGrid=expand.grid(
alpha =seq(0.1,1,length=20)
,lambda=seq(45,55,length=20)
))
#----------------
# 4. Elastic Net
#----------------
set.seed(4-4)
elastic <- train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='glmnet', trControl=params
,preProcess = c("center", "scale")
,tuneGrid=expand.grid(
alpha =seq(0.1,1,length=20)
,lambda=seq(45,65,length=20)
))
#----------------
# 4. Elastic Net
#----------------
set.seed(4-4)
elastic <- train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='glmnet', trControl=params
,preProcess = c("center", "scale")
,tuneGrid=expand.grid(
alpha =seq(0.1,1,length=10)
,lambda=seq(45,65,length=10)
))
#----------------
# 4. Elastic Net
#----------------
set.seed(4-4)
elastic <- train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='glmnet', trControl=params
,preProcess = c("center", "scale")
,tuneGrid=expand.grid(
alpha =seq(0.1,1,length=20)
,lambda=seq(45,65,length=20)
))
#----------------
# 4. Elastic Net
#----------------
set.seed(4-4)
elastic <- train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='glmnet', trControl=params
,preProcess = c("center", "scale")
,tuneGrid=expand.grid(
alpha =seq(0.1,0.5,length=20)
,lambda=seq(45,60,length=20)
))
elastic$bestTune
plot(elastic)
plot(elastic)
plot(lasso)
plot(lasso, main='Lasso Regression')
plot(ridge, main='Ridge Regression')
plot(lm, main='Linear Regression')
plot(lm, main='Linear Regression')
plot(elastic, main='Elastic Net')
plot(varImp(elastic),main='Elastic Net Feature Importance')
par(mfrow=c(1,2),mar=c(5,5,2,1),mgp=c(3.7,1,0)
);plot(elastic$finalModel,las=1,lwd=2,
xvar='lambda',xlab='Elastic Net Log Lambda'
);plot(elastic$finalModel,las=1,lwd=2,
xvar='dev',xlab='Elastic Net Fraction Deviance Explained'
);par(mfrow=c(1,1),mar=c(1,1,1,1),mgp=c(3,1,0))
#------------------------------------------
# Histogram and Density Plots of Residuals
#------------------------------------------
par(mfrow=c(1,1),mar=c(5.5,5.5,4,2)+0.1,mgp=c(4,1,0)
);hist(residuals(elastic),las=1, freq=FALSE, col='lightblue'
,ylim=c(0,max(density(residuals(elastic))$y))
);lines(density(residuals(elastic)),col='red',lwd=2
);par(mfrow=c(1,1),mar=c(1,1,1,1),mgp=c(3,1,0))
#------------
# Prediction
#------------
pred.elastic <- predict(elastic, test.set[-16])
#------------
# Prediction
#------------
pred.elastic <- predict(elastic, test.set[-17])
rmse.elastic <- sqrt(mean( (pred.elastic-train.set$SalePrice)^2 ) )
Elastic <- data.frame(predicted=pred.elastic, observed=test.set[,'SalePrice']) %>%
ggplot(aes(x=observed, y=predicted)) +
geom_point(color='black', pch=21, size=4, fill='red', alpha=0.3) +
geom_abline(slope=1, intercept=0, size=1) +
labs(title="Elastic Net", x='Observed', y='Predicted');Elastic
#---------------------
# 5. Model Comparison
#---------------------
if (!require('caret')) install.packages('caret'); library(caret)
model.list <- list(Linear=lm, Ridege=ridge, Lasso=lasso, Elastic=elastic)
resamp <- resamples(model.list)
bwplot(resamp,metric="RMSE",main='Model Comparison')
bwplot(resamp,metric="Rsquared",main='Model Comparision')
bwplot(resamp,metric="MAE",main='Model Comparision')
p3d.rmse <- plot_ly(resamp$values,mode="markers"
#               ,colors=c("green","blue")
,y =resamp$values$'Ridege~RMSE'
,x =resamp$values$'Lasso~RMSE'
,z =resamp$values$'Linear~RMSE'
,marker =list(line =list(color='black',width = 1)
,opacity=0.5, size=10
,color='red')
) %>% add_markers() %>%
layout(title = 'Model Comparison (RMSE)'
,scene = list(
yaxis = list(title = 'Ridege~RMSE')
,xaxis = list(title = 'Lasso~RMSE')
,zaxis = list(title = 'Linear~RMSE')));p3d.rmse
#str(resamp$values)
if (!require('plotly')) install.packages('plotly'); library(plotly)
p3d.rmse <- plot_ly(resamp$values,mode="markers"
#               ,colors=c("green","blue")
,y =resamp$values$'Ridege~RMSE'
,x =resamp$values$'Lasso~RMSE'
,z =resamp$values$'Linear~RMSE'
,marker =list(line =list(color='black',width = 1)
,opacity=0.5, size=10
,color='red')
) %>% add_markers() %>%
layout(title = 'Model Comparison (RMSE)'
,scene = list(
yaxis = list(title = 'Ridege~RMSE')
,xaxis = list(title = 'Lasso~RMSE')
,zaxis = list(title = 'Linear~RMSE')));p3d.rmse
p3d.Rsquared <- plot_ly(resamp$values,mode="markers"
#               ,colors=c("green","blue")
,y =resamp$values$'Ridege~Rsquared'
,x =resamp$values$'Lasso~Rsquared'
,z =resamp$values$'Linear~Rsquared'
,marker =list(line =list(color='black',width = 1)
,opacity=0.5, size=10
,color='blue')
) %>% add_markers() %>%
layout(title = 'Model Comparison (Rsquared)'
,scene = list(
yaxis = list(title = 'Ridege~Rsquared')
,xaxis = list(title = 'Lasso~Rsquared')
,zaxis = list(title = 'Linear~Rsquared')));p3d.Rsquared
p3d.MAE <- plot_ly(resamp$values,mode="markers"
#               ,colors=c("green","blue")
,y =resamp$values$'Ridege~MAE'
,x =resamp$values$'Lasso~MAE'
,z =resamp$values$'Linear~MAE'
,marker =list(line =list(color='black',width = 1)
,opacity=0.5, size=10
,color='green')
) %>% add_markers() %>%
layout(title = 'Model Comparison (MAE)'
,scene = list(
yaxis = list(title = 'Ridege~MAE')
,xaxis = list(title = 'Lasso~MAE')
,zaxis = list(title = 'Linear~MAE')));p3d.MAE
# Best Model
bestOne <- elastic$bestTune
elastic$bestTune
#---------------
# 6. PREDICTION
#---------------
predict.train <- predict(elastic, train.set)
training <- sqrt(mean(train.set$SalePrice - predict.train)^2)
predict.test <- predict(elastic, test.set)
testing  <- sqrt(mean(test.set$SalePrice - predict.test)^2)
cat('mse trianing = ', training, ', testing = ', testing)
#-----------
# TEST DATA
#-----------
if (!require('mice')) install.packages('mice'); library(mice)
source('yc.housing.rtm.test.prep.R')
test.tmp <- mice(test.prep, m=2, seed=111);
test.tmp <- complete(test.tmp,2);
test <- test.tmp[c(train.boruta.selected.features)]
test <- test[!names(test)%in%insignificant.features]
names(test)
prediction.lm      <- predict(lm     , test)
write.csv(prediction.lm, 'results/prediction.house.price.1.lm.csv' )
prediction.ridge   <- predict(ridge  , test)
write.csv(prediction.ridge, 'results/prediction.house.price.2.ridge.csv' )
prediction.lasso   <- predict(lasso  , test)
write.csv(prediction.lasso, 'results/prediction.house.price.2.lasso.csv' )
prediction.elastic <- predict(elastic, test)
write.csv(prediction.elastic, 'results/prediction.house.price.4.elastic.csv' )
summary(lm);#lm$results
lm <- train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF+YearBuilt
),train.set
,method='lm'
,preProcess = c("center", "scale")
,trControl=params)
summary(lm);#lm$results
lm <- train(SalePrice~.
+OverallQual:(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='lm'
,preProcess = c("center", "scale")
,trControl=params)
summary(lm);#lm$results
lm <- train(SalePrice~.
+(OverallQual+GrLivArea):(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='lm'
,preProcess = c("center", "scale")
,trControl=params)
summary(lm);#lm$results
lm <- train(SalePrice~.+GarageCars:GrLivArea
+(OverallQual):(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='lm'
,preProcess = c("center", "scale")
,trControl=params)
summary(lm);#lm$results
lm <- train(SalePrice~.+YearBuilt:GrLivArea
+(OverallQual):(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='lm'
,preProcess = c("center", "scale")
,trControl=params)
summary(lm);#lm$results
lm <- train(SalePrice~.+GarageCars:YearBuilt
+(OverallQual):(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='lm'
,preProcess = c("center", "scale")
,trControl=params)
summary(lm);#lm$results
lm <- train(SalePrice~.+OverallCondGarageCars:YearBuilt
+(OverallQual):(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='lm'
,preProcess = c("center", "scale")
,trControl=params)
lm <- train(SalePrice~.+OverallCond:YearBuilt
+(OverallQual):(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='lm'
,preProcess = c("center", "scale")
,trControl=params)
summary(lm);#lm$results
lm <- train(SalePrice~.+KitchenQual :YearBuilt
+(OverallQual):(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='lm'
,preProcess = c("center", "scale")
,trControl=params)
summary(lm);#lm$results
lm <- train(SalePrice~.+OverallCond:KitchenQual
+(OverallQual):(TotalBsmtSF+X2ndFlrSF#+YearBuilt
),train.set
,method='lm'
,preProcess = c("center", "scale")
,trControl=params)
summary(lm);#lm$results
lm <- train(SalePrice~.
+(OverallQual):(TotalBsmtSF+X2ndFlrSF+KitchenQual
),train.set
,method='lm'
,preProcess = c("center", "scale")
,trControl=params)
summary(lm);#lm$results
lm <- train(SalePrice~.
+(OverallQual):(TotalBsmtSF+X2ndFlrSF+YearRemodAdd
),train.set
,method='lm'
,preProcess = c("center", "scale")
,trControl=params)
summary(lm);#lm$results
lm <- train(SalePrice~.
+(OverallQual):(TotalBsmtSF+X2ndFlrSF+Neighborhood
),train.set
,method='lm'
,preProcess = c("center", "scale")
,trControl=params)
summary(lm);#lm$results
names(train.set)
#names(train.set)
train.set <- train.set[-2]
lm <- train(SalePrice~.
+(OverallQual):(TotalBsmtSF+X2ndFlrSF
),train.set
,method='lm'
,preProcess = c("center", "scale")
,trControl=params)
summary(lm);#lm$results
#------------------
# Diagnostic plots
#------------------
par(mfrow=c(2,2),mar=c(3,5.3,3,3),mgp=c(4,1,0)
);plot(lm$finalModel,las=1
);par(mfrow=c(1,1),mar=c(1,1,1,1),mgp=c(3,1,0))
